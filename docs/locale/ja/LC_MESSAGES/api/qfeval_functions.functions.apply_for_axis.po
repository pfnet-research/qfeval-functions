# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, qfeval-functions contributors
# This file is distributed under the same license as the qfeval-functions
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qfeval-functions \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-28 00:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../api/qfeval_functions.functions.apply_for_axis.rst:2
msgid "qfeval\\_functions.functions.apply\\_for\\_axis"
msgstr "qfeval\\_functions.functions.apply\\_for\\_axis"

#: of qfeval_functions.functions.apply_for_axis.apply_for_axis:1
msgid ""
"Apply a function expecting 2D input to a tensor along a specified "
"dimension."
msgstr "指定された次元に沿って、2次元入力を想定した関数をテンソルに適用します。"

#: of qfeval_functions.functions.apply_for_axis.apply_for_axis:4
msgid ""
"This utility function allows applying functions that expect 2D tensors of"
" shape ``(batch, n)`` to tensors of arbitrary dimensions. It handles the "
"reshaping by flattening all dimensions except the specified one, applying"
" the function, and then restoring the original shape. This is "
"particularly useful for implementing dimension-aware operations without "
"explicitly handling different tensor shapes."
msgstr "このユーティリティ関数は、形状が ``(batch, n)`` の2次元テンソルを想定した関数を、任意の次元のテンソルに適用することを可能にします。具体的には、指定された次元以外のすべての次元を平坦化し、関数を適用した後、元の形状に復元します。この処理は、異なるテンソル形状を明示的に処理することなく、次元を意識した操作を実装する際に特に有用です。"

#: ../../api/qfeval_functions.functions.apply_for_axis.rst
msgid "Parameters"
msgstr "パラメータ"

#: of qfeval_functions.functions.apply_for_axis.apply_for_axis:12
msgid ""
"A function that expects a 2D tensor of shape ``(batch, n)`` as input and "
"returns a tensor where the batch dimension is preserved. The function "
"must be dimension-preserving along the batch dimension."
msgstr "入力として形状が``(batch, n)``の2次元テンソルを想定し、バッチ次元が保持されたテンソルを返す関数です。関数はバッチ次元に沿って次元を保持する必要があります。"

#: of qfeval_functions.functions.apply_for_axis.apply_for_axis:17
msgid "The input tensor of arbitrary dimensions to process."
msgstr "処理対象の任意次元テンソル。"

#: of qfeval_functions.functions.apply_for_axis.apply_for_axis:20
msgid ""
"The dimension along which to apply the function. Default is -1 (the last "
"dimension)."
msgstr "関数を適用する次元。デフォルトは -1 で、最後の次元を指定します。"

#: ../../api/qfeval_functions.functions.apply_for_axis.rst
#, fuzzy
msgid "Returns"
msgstr "戻り値の型"

#: of qfeval_functions.functions.apply_for_axis.apply_for_axis:24
msgid ""
"The result of applying function :attr:`f` along the specified dimension, "
"with the same shape as the input tensor."
msgstr "指定された次元に沿って関数 :attr:`f` を適用した結果で、入力テンソルと同じ形状を持ちます。"

#: ../../api/qfeval_functions.functions.apply_for_axis.rst
msgid "Return type"
msgstr "戻り値の型"

#: of qfeval_functions.functions.apply_for_axis.apply_for_axis:29
msgid "Example"
msgstr "使用例"

#: of qfeval_functions.functions.apply_for_axis.apply_for_axis:53
msgid ""
"The function :attr:`f` must preserve the batch dimension size. Functions "
"that change the batch dimension size will cause shape mismatch errors "
"during the reshape operation."
msgstr "関数 :attr:`f` はバッチ次元のサイズを保持しなければなりません。バッチ次元のサイズを変更する関数は、形状不一致エラーを引き起こし、形状変更処理中にエラーが発生します。"

#~ msgid ""
#~ "Applies the given data `x` into "
#~ "the given function `f`, which expects"
#~ " a tensor of `(batch, n)` shape."
#~ msgstr "与えられたデータ `x` を、`(batch, n)` 形状のテンソルを期待する関数 `f` に適用します。"

#~ msgid ""
#~ "This flattens the unspecified dimensions "
#~ "of `x` and unflattens the result "
#~ "of the given function `f`.  This "
#~ "is useful to implement a function "
#~ "manipulating a tensor along an axis "
#~ "without thinking of the number of "
#~ "dimensions."
#~ msgstr ""
#~ "この関数は、`x` の未指定の次元をフラット化し、与えられた関数 `f` "
#~ "の結果をアンフラット化します。これは、テンソルの特定の軸に沿って操作を行う関数を実装する際に便利です。テンソルの次元数を考慮する必要がありません。"

#~ msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~torch.Tensor\\``"
#~ msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~torch.Tensor\\``"

